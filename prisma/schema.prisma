generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                          String         @id @default(cuid())
  email                       String         @unique
  name                        String?
  avatar                      String?
  googleId                    String?        @unique
  createdAt                   DateTime       @default(now())
  updatedAt                   DateTime       @updatedAt
  relationshipStatus          String?
  relationshipGoals           String[]       @default([])
  currentChallenges           String[]       @default([])
  preferredCommunicationStyle String?
  personalityTraits           Json?
  assessmentCompletedAt       DateTime?
  locale                      String         @default("en")
  preferredLanguage           String         @default("en")
  preferredAiModel            String         @default("gpt-4o-mini")
  age                         Int?
  assessmentProgress          Json?
  coreValues                  String[]       @default([])
  dealBreakers                String[]       @default([])
  emotionalProfile            Json?
  gender                      String?
  lifestylePriorities         Json?
  location                    String?
  profileInsights             Json?
  relationshipHistory         Json?
  relationshipReadiness       Int?
  relationshipVision          String?
  selfReflection              Json?
  chatSessions                ChatSession[]
  taskProgress                TaskProgress[]
  userProgress                UserProgress[]

  @@map("users")
}

model CoachingProgram {
  id           String         @id @default(cuid())
  name         String
  description  String
  duration     Int
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  phases       Phase[]
  userProgress UserProgress[]

  @@map("coaching_programs")
}

model Phase {
  id          String          @id @default(cuid())
  name        String
  description String
  order       Int
  programId   String
  program     CoachingProgram @relation(fields: [programId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("phases")
}

model Task {
  id           String         @id @default(cuid())
  title        String
  description  String
  type         TaskType
  content      Json?
  order        Int
  phaseId      String
  taskProgress TaskProgress[]
  phase        Phase          @relation(fields: [phaseId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model UserProgress {
  id             String          @id @default(cuid())
  userId         String
  programId      String
  currentPhase   Int             @default(1)
  completedTasks Int             @default(0)
  totalTasks     Int             @default(0)
  startedAt      DateTime        @default(now())
  completedAt    DateTime?
  program        CoachingProgram @relation(fields: [programId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, programId])
  @@map("user_progress")
}

model TaskProgress {
  id          String     @id @default(cuid())
  userId      String
  taskId      String
  status      TaskStatus @default(NOT_STARTED)
  response    String?
  feedback    String?
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId])
  @@map("task_progress")
}

model ChatSession {
  id              String        @id @default(cuid())
  userId          String
  title           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isTaskCompleted Boolean       @default(false)
  sessionType     SessionType   @default(GENERAL)
  systemPrompt    String?
  taskId          String?
  selectedModel   String        @default("gpt-4o-mini")
  messages        ChatMessage[]
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_sessions")
}

model ChatMessage {
  id        String      @id @default(cuid())
  sessionId String
  role      MessageRole
  content   String
  metadata  Json?
  createdAt DateTime    @default(now())
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

enum TaskType {
  REFLECTION
  EXERCISE
  ASSESSMENT
  JOURNALING
  COMMUNICATION
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum SessionType {
  GENERAL
  TASK_FOCUSED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}
